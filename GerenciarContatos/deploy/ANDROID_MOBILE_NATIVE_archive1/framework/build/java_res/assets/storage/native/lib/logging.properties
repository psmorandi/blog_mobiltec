############################################################
#  	Default Logging Configuration File
#
# You can use a different file by specifying a filename
# with the com.sun.util.logging.config.file system property.  
# For example java -Dcom.sun.util.logging.config.file=myfile
############################################################

############################################################
#  	Global properties
############################################################

# "handlers" specifies a comma separated list of log Handler 
# classes.  These handlers will be installed during VM startup.
# Note that these classes must be on the system classpath.
# By default we configure a ConsoleHandler, which will only
# show messages at the INFO and above levels, and a
# ServerSocketHandler that shows messages at all levels.
handlers= com.sun.util.logging.ConsoleHandler, com.sun.util.logging.ServerSocketHandler
#handlers= com.sun.util.logging.AsyncFileHandler
#handlers= com.sun.util.logging.SocketHandler

# To also add the FileHandler, use the following line instead.
#handlers= com.sun.util.logging.FileHandler, com.sun.util.logging.ConsoleHandler

# Default global logging level.
# This specifies which kinds of events are logged across
# all loggers.  For any given facility this global level
# can be overriden by a facility specific level
# Note that the ConsoleHandler also has a separate level
# setting to limit messages printed to the console.
.level= WARNING

############################################################
# Handler specific properties.
# Describes specific configuration info for Handlers.
############################################################

# default file output is in user's home directory.
com.sun.util.logging.FileHandler.pattern = %h/java%u.log
com.sun.util.logging.FileHandler.limit = 50000
com.sun.util.logging.FileHandler.count = 1
com.sun.util.logging.FileHandler.formatter = com.sun.util.logging.XMLFormatter

com.sun.util.logging.AsyncFileHandler.formatter = com.sun.util.logging.XMLFormatter

# Limit the message that are printed on the console to INFO and above.
com.sun.util.logging.ConsoleHandler.level = INFO
com.sun.util.logging.ConsoleHandler.formatter = com.sun.util.logging.ExtremelySimpleFormatter

# ServerSocketHandler opens a server socket on the given port.
# The simplest way to attach to this handler from elsewhere is to use telnet:
#           telnet DeviceName <port>    //(5002 in this example).
# ServerSocketHandler stores a backlog of <buffersize> messages, which are output
# upon a successful connection. Priority is the thread priority of the logging thread.
com.sun.util.logging.ServerSocketHandler.level = ALL
com.sun.util.logging.ServerSocketHandler.port = 5002
com.sun.util.logging.ServerSocketHandler.buffersize = 50
com.sun.util.logging.ServerSocketHandler.formatter = com.sun.util.logging.ExtremelySimpleFormatter
com.sun.util.logging.ServerSocketHandler.priority = 2

com.sun.util.logging.SocketHandler.level = ALL
com.sun.util.logging.SocketHandler.port = 5002
com.sun.util.logging.SocketHandler.host = localhost
com.sun.util.logging.SocketHandler.formatter = com.sun.util.logging.SimpleFormatter

############################################################
# Facility specific properties.
# Provides extra control for each logger.
############################################################

# For example, set the com.xyz.foo logger to only log SEVERE
# messages:
com.xyz.foo.level = SEVERE

# set default logging level for widgets to FINE
com.sun.widget.level = WARNING

